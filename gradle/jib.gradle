def matchedTags = project.version =~ /(\d+)\.(\d+)\.(\d+)/
def fullVersion = project.version
def majorVersion = matchedTags[0][1]
def majorMinorVersion = majorVersion + "." + matchedTags[0][2]

// Function to detect Docker socket path
def getDockerHost() {
    // Check if DOCKER_HOST is already set
    def dockerHost = System.getenv('DOCKER_HOST')
    if (dockerHost) {
        println "Using existing DOCKER_HOST: ${dockerHost}"
        return dockerHost
    }

    // For macOS with Docker Desktop, check the user-specific socket
    def userDockerSocket = System.getProperty('user.home') + '/.docker/run/docker.sock'
    if (new File(userDockerSocket).exists()) {
        def dockerEndpoint = 'unix://' + userDockerSocket
        println "Detected Docker Desktop socket: ${dockerEndpoint}"
        return dockerEndpoint
    }

    // Default Docker socket
    def defaultSocket = '/var/run/docker.sock'
    if (new File(defaultSocket).exists()) {
        def dockerEndpoint = 'unix://' + defaultSocket
        println "Using default Docker socket: ${dockerEndpoint}"
        return dockerEndpoint
    }

    println "No Docker socket found, using default configuration"
    return null
}

// Get the Docker host to use
def dockerHostEndpoint = getDockerHost()

jib {
    // Configure Docker daemon connection
    dockerClient {
        if (dockerHostEndpoint) {
            environment = ['DOCKER_HOST': dockerHostEndpoint]
        }
    }

    from {
        image = 'eclipse-temurin:21-jre'
    }

    to {
        image = project.name
        // Tag image with
        // - Full version
        // - Major Version
        // - Major.Minor version
        // - "latest"
        tags = [fullVersion, majorVersion, majorMinorVersion, 'latest']
    }

    // User current time for image creation
    container {
        creationTime = "USE_CURRENT_TIMESTAMP"
    }
}
